stages:
  - pre
  - build
  - run
  - post

variables:
  BUILD_DIR: "project/build"

prepare:
  stage: pre
  script:
    - mkdir -p $BUILD_DIR
    - ls project/
  artifacts:
    paths:
      - $BUILD_DIR

build:
  needs:
    - job: prepare
  stage: build      
  script:
    - cd $BUILD_DIR
    - cmake ..
    - make
    - ./cmake
  artifacts:
    paths:
      - $BUILD_DIR

run:
  stage: run
  script:
    - pwd
    - cd $BUILD_DIR
    - ./cmake

cleanup:
  stage: post
  script:
    - rm -rf $BUILD_DIR

# stages:
#   - build
#   - test

# variables:
#   CXX: g++
#   CXXFLAGS: "-std=c++11 -Wall"

# before_script:
#   - apt-get update -qq
#   - apt-get install -y -qq cmake

# build:
#   stage: build
#   script:
#     - mkdir build
#     - cd build
#     - cmake ..
#     - make

# test:
#   stage: test
#   script:
#     - ./build/runTests  # Assuming your test executable is named "runTests"

### merge request
# workflow:
#   rules:
#     - if: $CI_MERGE_REQUEST_IID
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


### C++
# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

# image: gcc

# build:
#   stage: build
#   # instead of calling g++ directly you can also use some build toolkit like make
#   # install the necessary build tools when needed
#   # before_script:
#   #   - apt update && apt -y install make autoconf
#   script:
#     - g++ helloworld.cpp -o mybinary
#   artifacts:
#     paths:
#       - mybinary
#       # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
#       # cache:
#       #   paths:
#       #     - "*.o"

# # run tests using the binary built before
# test:
#   stage: test
#   script:
#     - ./runmytests.sh

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
